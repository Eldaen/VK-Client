//
//  NewsCell.swift
//  VK-Client
//
//  Created by –î–µ–Ω–∏—Å –°–∏–∑–æ–≤ on 23.10.2021.
//

import UIKit

/// –Ø—á–µ–π–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ NewsController
final class NewsTableViewCell: UITableViewCell {

	private let userImage: UIImageView = {
		let image = UIImageView()
		image.translatesAutoresizingMaskIntoConstraints = false
		return image
	}()
	
	private let userName: UILabel = {
		let label = UILabel()
		label.translatesAutoresizingMaskIntoConstraints = false
		label.font = UIFont.systemFont(ofSize: 17)
		label.textColor = .black
		return label
	}()
	
	private let postDate: UILabel = {
		let label = UILabel()
		label.translatesAutoresizingMaskIntoConstraints = false
		label.font = UIFont.systemFont(ofSize: 14)
		label.textColor = .black
		return label
	}()
	
	private let postText: UITextView = {
		let text = UITextView()
		text.inputView = nil
		text.translatesAutoresizingMaskIntoConstraints = false
		text.isScrollEnabled = false
		text.autocapitalizationType = .sentences
		text.font = UIFont.systemFont(ofSize: 14)
		text.textColor = .black
		return text
	}()
	
	private let collectionView: UICollectionView = {
		let layout = UICollectionViewFlowLayout()
		let collection = UICollectionView(frame: .zero, collectionViewLayout: layout)
		collection.translatesAutoresizingMaskIntoConstraints = false
		collection.alwaysBounceVertical = false
		return collection
	}()
	
	private let footerView: UIView = {
		let view = UIView()
		view.translatesAutoresizingMaskIntoConstraints = false
		return view
	}()
	
	private let footerHorizontalStack: UIStackView = {
		let stack = UIStackView()
		stack.axis = .horizontal
		stack.distribution = .equalSpacing
		stack.contentMode = .center
		stack.translatesAutoresizingMaskIntoConstraints = false
		return stack
	}()
	
	private let likesControl: LikeControl = {
		let likeControl = LikeControl(frame: .zero)
		likeControl.tintColor = .red
		return likeControl
	}()
	
	private let viewsLabel: UILabel = {
		let views = UILabel()
		views.font = UIFont.systemFont(ofSize: 14)
		return views
	}()
	
	/// –ú–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private var collection: [UIImage] = []
	
	/// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —è—á–µ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	private var standard: NSLayoutConstraint?
	
	/// –Ø—á–µ–π–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç
	private var empty: NSLayoutConstraint?
	
	/// –ú–æ–¥–µ–ª—å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
	private var model: NewsTableViewCellModelType?
	
	/// –í—å—é –º–æ–¥–µ–ª—å
	var likesResponder: NewsViewModelType?
	
	/// –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç –≤—ã—Å–æ—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	var collectionHeight: NSLayoutConstraint?
	
	/// –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	var collectionHeightValue: CGFloat = 270
    
    /// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç —è—á–µ–π–∫—É NewsTableViewCell
    /// - Parameters:
    ///   - model: –ú–æ–¥–µ–ª—å –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å
    func configure (with model: NewsTableViewCellModelType) {
		setupCell()
		setupCollectionView()
		setupFooter()
		setupConstraints()
		updateCellData(with: model)
		self.model = model
		
		selectionStyle = .none
		likesControl.setLikesResponder(responder: self)
    }
	
	/// –î–æ–±–∞–≤–ª—è–µ—Ç –≤ collectionView —Å–≤–µ–∂–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
	func updateCollection(with images: [UIImage]) {
		collection = images
		
		let layout = getCollectionLayout(isMultiple: collection.count > 1)
		collectionView.collectionViewLayout = layout
		collectionView.reloadData()
	}
	
	/// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
	func updateProfileImage(with image: UIImage) {
		userImage.image = image
		userImage.layoutIfNeeded()
		userImage.layer.cornerRadius = userImage.frame.size.width / 2
		userImage.layer.masksToBounds = true
	}
}

// MARK: collection view extension
extension NewsTableViewCell: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return collection.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "NewsCollectionViewCell",
															for: indexPath) as? NewsCollectionViewCell
		else {
            return UICollectionViewCell()
        }
        
        // –Ω–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å —è—á–µ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ collection –∏ –ø–æ—Ç–æ–º –≤ –Ω–∞—à—É –Ω–æ–≤—É—é —è—á–µ–π–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—ç–º –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        let collectionCell = collection[indexPath.row]
        cell.configure(with: collectionCell)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumInteritemSpacingForSectionAt section: Int
	) -> CGFloat {
        return 0
    }
	
	override func prepareForReuse() {
		standard = nil
		empty = nil
		model = nil
		collection = []
	}
}

// MARK: - Private methods
private extension NewsTableViewCell {
	
	func setupConstraints() {
		
		NSLayoutConstraint.activate([
			userImage.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),
			userImage.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),
			userImage.widthAnchor.constraint(equalToConstant: 60),
			userImage.heightAnchor.constraint(equalToConstant: 60),
			
			userName.leadingAnchor.constraint(equalTo: userImage.trailingAnchor, constant: 10),
			userName.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),
			userName.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),
			
			postDate.leadingAnchor.constraint(equalTo: userImage.trailingAnchor, constant: 10),
			postDate.topAnchor.constraint(equalTo: userName.bottomAnchor, constant: 10),
			
			postText.topAnchor.constraint(equalTo: userImage.bottomAnchor, constant: 10),
			postText.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),
			postText.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),
			
			collectionView.topAnchor.constraint(equalTo: postText.bottomAnchor, constant: 10),
			collectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
			collectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
			collectionView.widthAnchor.constraint(equalTo: contentView.widthAnchor),
			
			footerView.topAnchor.constraint(equalTo: collectionView.bottomAnchor, constant: 20),
			footerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),
			footerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),
			footerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
			footerView.heightAnchor.constraint(equalToConstant: 30),
			
			footerHorizontalStack.widthAnchor.constraint(equalTo: footerView.widthAnchor),
		])
		
		collectionHeight = collectionView.heightAnchor.constraint(equalToConstant: collectionHeightValue)
		collectionHeight?.isActive = true
	}
	
	func setupCell() {
		contentView.addSubview(userImage)
		contentView.addSubview(userName)
		contentView.addSubview(postDate)
		contentView.addSubview(postText)
		contentView.addSubview(collectionView)
		contentView.addSubview(footerView)
	}
	
	/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –Ω–∞—à—É collectionView –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é view
	func setupCollectionView() {
		collectionView.register(NewsCollectionViewCell.self, forCellWithReuseIdentifier: "NewsCollectionViewCell")
		collectionView.backgroundColor = .white
		collectionView.dataSource = self
		collectionView.delegate = self
		
		contentView.addSubview(collectionView)
	}
	
	/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Ñ—É—Ç–µ—Ä
	func setupFooter() {
		footerHorizontalStack.addArrangedSubview(likesControl)
		footerHorizontalStack.addArrangedSubview(viewsLabel)
		footerView.addSubview(footerHorizontalStack)
	}
	
	/// –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
	func updateCellData(with model: NewsTableViewCellModelType) {
		userImage.image = UIImage(named: model.source.image)
		userName.text = model.source.name
		postDate.text = model.postDate
		postText.text = model.postText
		collection = model.collection
		
		likesControl.setLikes(with: model.likesModel?.count ?? 0)
		viewsLabel.text = "üîç \(model.views?.count ?? 0)"
		
		self.collectionView.reloadData()
	}
	
	/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –°omposition Layout –¥–ª—è –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	func getCollectionLayout(isMultiple: Bool) -> UICollectionViewCompositionalLayout {
		
		let itemSize = NSCollectionLayoutSize(
		  widthDimension: .fractionalWidth(1.0),
		  heightDimension: .fractionalHeight(1.0))
		
		let fullPhotoItem = NSCollectionLayoutItem(layoutSize: itemSize)
		
		let groupSize = NSCollectionLayoutSize(
			widthDimension: .fractionalWidth(isMultiple ? 0.95 : 1.0),
		  heightDimension: .fractionalWidth(2/3))
		
		let group = NSCollectionLayoutGroup.horizontal(
		  layoutSize: groupSize,
		  subitem: fullPhotoItem,
		  count: 1)
		group.contentInsets = NSDirectionalEdgeInsets(
		  top: 5,
		  leading: 5,
		  bottom: 5,
		  trailing: 5)
		
		let section = NSCollectionLayoutSection(group: group)
		section.orthogonalScrollingBehavior = .continuous
		let layout = UICollectionViewCompositionalLayout(section: section)
		return layout
	}
}

// MARK: - CanLike protocol extension

extension NewsTableViewCell: CanLike {
	
	///  –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–∞–π–∫ –ø–æ—Å—Ç–∞
	func setLike() {
		if let id = model?.postID,
		   let ownerId = model?.source.id {
			likesResponder?.setLike(post: id, owner: ownerId) { [weak self] result in
				self?.likesControl.setLikes(with: result)
			}
		}
	}
	
	/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –ª–∞–π–∫–∞
	func removeLike() {
		if let id = model?.postID,
		   let ownerId = model?.source.id {
			likesResponder?.setLike(post: id, owner: ownerId) { [weak self] result in
				self?.likesControl.setLikes(with: result)
			}
		}
	}
}
