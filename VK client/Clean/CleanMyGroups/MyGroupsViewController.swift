//
//  MyGroupsViewController.swift
//  VK client
//
//  Created by Денис Сизов on 06.12.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyGroupsDisplayLogic: AnyObject
{
	func displaySomething(viewModel: MyGroups.Something.GroupModel)
}

class MyGroupsViewController: UIViewController, MyGroupsDisplayLogic
{
	var interactor: MyGroupsBusinessLogic?
	var router: (NSObjectProtocol & MyGroupsRoutingLogic & MyGroupsDataPassing)?
	
	/// Таблица с ячейками групп, в которых состоит пользователь
	private let tableView: UITableView = {
		let tableView = UITableView()
		tableView.backgroundColor = .white
		return tableView
	}()
	
	private let searchBar: UISearchBar = {
		let searchBar = UISearchBar()
		searchBar.frame = .zero
		searchBar.searchBarStyle = UISearchBar.Style.default
		searchBar.isTranslucent = false
		searchBar.sizeToFit()
		return searchBar
	}()
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
	{
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder)
	{
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup()
	{
		let viewController = self
		let interactor = MyGroupsInteractor()
		let presenter = MyGroupsPresenter()
		let router = MyGroupsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?)
	{
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad()
	{
		super.viewDidLoad()
		searchBar.delegate = self
		
		configureNavigation()
		setupTableView()
		setupConstraints()
		
		doSomething()
	}
	
	// MARK: Do something
	
	//@IBOutlet weak var nameTextField: UITextField!
	
	func doSomething()
	{
		let request = MyGroups.Something.Request()
		interactor?.doSomething(request: request)
	}
	
	func displaySomething(viewModel: MyGroups.Something.GroupModel)
	{
		//nameTextField.text = viewModel.name
	}
}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension MyGroupsViewController: UITableViewDelegate, UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		0
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		guard let cell = tableView.dequeueReusableCell(withIdentifier: "MyGroupsCell", for: indexPath) as? MyGroupsCell else {
			return UITableViewCell()
		}
		
		return cell
	}
}

// MARK: - Private methods

private extension MyGroupsViewController {
	// Конфигурируем Нав Бар
	func configureNavigation() {
		self.title = "Мои группы"
		
		let add = UIBarButtonItem(
			barButtonSystemItem: .add,
			target: self,
			action: nil //#selector(addGroup)
		)
		add.tintColor = .black
		navigationItem.rightBarButtonItem = add
	}
	
	// Конфигурируем ячейку
	func setupTableView() {
		tableView.frame = self.view.bounds
		tableView.rowHeight = 80
		tableView.register(MyGroupsCell.self, forCellReuseIdentifier: "MyGroupsCell")
		tableView.dataSource = self
		tableView.delegate = self
		tableView.tableHeaderView = searchBar
		
		self.view.addSubview(tableView)
		
	}
	
	// Задаём констрейнты таблице
	func setupConstraints() {
		NSLayoutConstraint.activate([
			tableView.topAnchor.constraint(equalTo: view.topAnchor),
			tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
			tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
			tableView.rightAnchor.constraint(equalTo: view.rightAnchor)
		])
	}
}

// MARK: - UISearchBarDelegate

extension MyGroupsViewController: UISearchBarDelegate {
	
	/// Основной метод, который осуществляет поиск
	func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
	}
	
	/// Отменяет поиск
	func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
	}
}
